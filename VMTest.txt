Questo file documenta come funzionano i controlli di SEB e
quindi del programma di test VMTest.exe. Se vuoi solo la
guida per installare, guarda Readme.txt

Siccome SEB è open source, ho preso il codice e l'ho messo in
un programma standalone. I controlli quindi saranno identici.
Ho aggiunto delle stampe in più così puoi eventualmente capire
perchè il controllo fallisce.
Il codice corrisponde a SEB 3.1.1 . Magari in versioni 
successive sono cambiati.
I punti salienti:

isVirtualMachine |= manufacturer.Contains("microsoft corporation") && !model.Contains("surface");
isVirtualMachine |= manufacturer.Contains("vmware");
isVirtualMachine |= manufacturer.Contains("parallels software");
isVirtualMachine |= model.Contains("virtualbox");
isVirtualMachine |= manufacturer.Contains("qemu");

Manufacturer e Model sono due valori presi dal BIOS e che Windows non falsifica.
Quindi bisogna cambiare il valore del BIOS affinchè passi la cosa.

isVirtualMachine |= macAddress.StartsWith(QEMU_MAC_PREFIX) || macAddress.StartsWith(VIRTUALBOX_MAC_PREFIX);

Viene controllato anche l'indirizzo MAC delle schede di rete, quindi è meglio cambiarlo.
(Questo controllo è mezzo rotto: molto spesso il mac rilevato sarà di tutti zeri.
Però better safe than sorry no?)

foreach (var device in plugAndPlayDeviceIds)
{
	isVirtualMachine |= PCI_VENDOR_BLACKLIST.Any(device.ToLower().Contains);
}

La parte che se fallisce è un guaio perchè non so come bypassare la cosa.
Probabilmente bisognerebbe cambiare il vendor id del dispositivo e cambiare il driver
affinchè combaci.
Scansiona tutti i dispositivi collegati al PC (pci, usb, acpi... tutto) alla ricerca
di qualunque cosa abbia contenga una di queste stringhe:
"vbox", "vid_80ee", "qemu", "ven_1af4", "ven_1b36", "subsys_11001af4".
Quindi, di fatto virtualbox e qemu sono tagliati fuori, vmware sembra non esponga dispositivi
sospetti, per questo è meglio usare quello direttamente e basta.

